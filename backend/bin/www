#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const { nanoid } = require('nanoid');
const version = require('../package.json').version;

const games = {};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// Set up sockets
const socket = require('socket.io');
// const io = socket(server);
const io = socket(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', socket => {
    const sessionID = socket.id;
    console.log('connected', sessionID)

    // send the updated games to all clients (broadcast)
    // console.log('games', games);
    io.emit('games', Object.keys(games));

    let previousId;

    const safeJoin = currentId => {
        // when user joins a new room, server makes him/her leave the previous room
        socket.leave(previousId);
        socket.join(currentId);
        previousId = currentId;
    };

    // socket.on('getGame', gameId => {
    //     // join room
    //     safeJoin(gameId);
    //     const newGame = {};
    //     newGame[gameId] = games[gameId];
    //     // console.log('sending game', newGame);
    //     socket.emit('game', newGame);
    // });

    socket.on('getGame', gameId => {
        const game = {};
        safeJoin(gameId);
        // set the key as the id and the value as the players and state
        game[gameId] = games[gameId];
        socket.emit('game', game);
    });

    socket.on('addGame', () => {
        // generate a random string as id
        const gameId = nanoid(8);
        // start with empty players
        const players = [];
        // start with empty state
        const state = [
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ];

        // save the new game
        games[gameId] = {
            players: players,
            state: state,
            turn: null,
            winner: null,
            draw: false,
            moves: 0,
            version: version,
        }

        // send the newly created game to the connecting client
        const newGame = {};
        newGame[gameId] = games[gameId];

        // console.log('game', newGame);
        socket.emit('game', newGame);

        // send the updated games to all clients (broadcast)
        // console.log('games', games);
        const max = 11;
        if (Object.keys(games).length >= max) {
            // console.log('truncate games');
            Object.keys(games).reverse().forEach((val, index) => {
                // console.log(index, val);
                if (index > max) {
                    // console.log('delete', val);
                    delete games[val];
                }
            })
        }
        io.emit('games', Object.keys(games));
    });

    socket.on('joinGame', (event) => {
        // console.log('----- joinGame');
        // only add up to 2 players
        if (games[event.gameId].players.length < 2) {
            games[event.gameId].players.push(event.playerName);
        }

        // send new game info
        const newGame = {};
        newGame[event.gameId] = games[event.gameId];
        if (games[event.gameId].turn === null) {
            games[event.gameId].turn = event.playerName
        }
        // console.log('game', event.gameId, newGame);
        // socket.emit('game', newGame);
        // TODO maintain 2 sockets
        io.emit('game', newGame);
    });

    socket.on('playGame', (event) => {
        // console.log('playGame', event);
        const gameId = event.gameId;
        const playerName = event.playerName;
        const positionX = event.x;
        const positionY = event.y;

        // position must be empty and players must be 2
        if (games[gameId].state[positionX][positionY] === 0 && games[gameId].players.length === 2) {
            // player 1 made move
            if (games[gameId].players[0] === playerName) {
                games[gameId].state[positionX][positionY] = 1;
                games[gameId].turn = games[gameId].players[1];
                games[gameId].moves++;
            }
            // player 2 made move
            else if (games[gameId].players[1] === playerName) {
                games[gameId].state[positionX][positionY] = -1;
                games[gameId].turn = games[gameId].players[0];
                games[gameId].moves++;
            }

            games[gameId].winner = calculateWinner(games[gameId]);

            if(games[gameId].winner) {
                games[gameId].turn = null;
            }

            if(games[gameId].moves >= 9 && !games[gameId].winner) {
                games[gameId].draw = true;
                games[gameId].turn = null;
            }

            // send new game info`
            const newGame = {};
            newGame[event.gameId] = games[event.gameId];
            // console.log('game', newGame);
            // socket.emit('game', newGame);
            // TODO maintain 2 sockets
            io.emit('game', newGame);
        }
    });

});

function calculateWinner(game) {
    // console.log('calculateWinner', game);
    const state = game.state;
    let winIndex = null;
    let winner = null;

    if (state[0][0]!==0 && state[0][0]===state[0][1] && state[0][1]===state[0][2]) {
        winIndex = [0, 0];
    }
    if (state[1][0]!==0 && state[1][0]===state[1][1] && state[1][1]===state[1][2]) {
        winIndex =  [1, 0];
    }
    if (state[2][0]!==0 && state[2][0]===state[2][1] && state[2][1]===state[2][2]) {
        winIndex =  [2, 0];
    }
    if (state[0][0]!==0 && state[0][0]===state[1][0] && state[1][0]===state[2][0]) {
        winIndex =  [0, 0];
    }
    if (state[0][1]!==0 && state[0][1]===state[1][1] && state[1][1]===state[2][1]) {
        winIndex =  [0, 1];
    }
    if (state[0][2]!==0 && state[0][2]===state[1][2] && state[1][2]===state[2][2]) {
        winIndex =  [0, 2];
    }
    if (state[0][0]!==0 && state[0][0]===state[1][1] && state[1][1]===state[2][2]) {
        winIndex =  [0, 0];
    }
    if (state[0][2]!==0 && state[0][2]===state[1][1] && state[1][1]===state[2][0]) {
        winIndex =  [0, 2];
    }

    // const winIndex = this.checkStateForWin(this.game[this.gameId].state);

    if (winIndex) {
        if (game.state[winIndex[0]][winIndex[1]]===1) {
            winner = game.players[0];
        } else if (game.state[winIndex[0]][winIndex[1]]=== -1) {
            winner = game.players[1];
        }
    } else {
        winner = null;
    }

    return winner;

}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

